ADD A DB

1. Import Nuget for entity framework
2. Create Context class and inherit from DbContext
3. Add DbSets
4. Add the connection string to the appsettings(.development).json
    eg.     "ConnectionStrings": {
                "DefaultConnection" : "Data source=dbname.db"
            }
5. For dotnet 5.0.0, add the Context to the Startup.cs:

    a) Refactor the IConfiguration field as private readonly
    b) Add the Context to the Services configuration passing in the options the connection string
        e.g         services.AddDbContext<DataContext>(options =>
                    {
                        options.UseSqlite(ConfigField.GetConnectionString("DefaultConnection"));
                    });
6. Install ef tools depending on version
7. Create migration
    eg. dotnet ef migrations add <MigrationName> -o <FolderAddress>
8. Create db : dotnet ef database update


API CONTROLLERS
1. Add new controller and inherit from ControllerBase (controllers without views)
2. Add attributes:
    [ApiController]
    [Route("routePrefix/[controller]")]         (The [controller] specifies that the route will 
                                                take the controller's name inside the square brackets)
3. Add a constructor with the DataContext injected
        eg.     private readonly DataContext Context;
                public UsersController(DataContext context)
                {
                    Context = context;
                }
4. Add the API endpoints similar to ASP.NET MVC



ANGULAR HTTP REQUESTS
1. app.module > import HttpClientModule from angular/common/http
2. app.component
    a) inject the HttpClient as a constructor parameter
    b) inherit/implement OnInit
    c) use the relevant method/api verb from the httpClient inside a function or in ngOnInit()
            i.  the response should be assigned to something in order to be used by other components etc
            ii. do something with the error
            iii.complete is optional


IMPLEMENTING CORS
Startup.cs
1) ConfigureServices: add CORS
2) Configure:   a) add CORS between Routing and Authorization. Order is important in this case.
                b) add a policy.     AllowAnyMethod()
                                     AllowAnyHeader()
                                     WithOrigins(): specify the client url that will request the data

SSL CERTIFICATES
dotnet core: CLI dotnet dev-certs https --trust or --clean and then --trust
angular:    a) copy certificate in a folder inside the app
            b) add the options to angular.json > serve
                eg  "options": {
                        "sslKey": "./ssl/server.key",
                        "sslCert": "./ssl/server.crt",
                        "ssl": true,
                        "browserTarget": "test:build"
                    }
            
